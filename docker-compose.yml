# Service configurations for all microservices
# has to be specified by environment files

version: '3.7'


volumes:
  auth_postgres_data:
    driver: local

services:

  # ----------------- UI SERVICE (/ui) --------------------
  ui:
    image: ${DOCKER_REGISTRY}/ui
    build:
      context: ./ui/
      args:
        UI_BASE_URL: /
        AUTH_SERVICE_URL: /auth
        ADAPTER_SERVICE_URL: /api/adapter
        CORE_SERVICE_URL: /api/core
        STORAGE_SERVICE_URL: /api/storage
        TRANSFORMATION_SERVICE_URL: /api/transformation
        NOTIFICATION_SERVICE_URL: /api/notification
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.to-ui.rule=PathPrefix(`/`)"
      - "traefik.http.services.ui.loadbalancer.server.port=80"

  # ----------------- AUTH SERVICE (/auth) --------------------
  auth-db:
    image: postgres
    volumes:
      - auth_postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: password

  auth:
    image: ${DOCKER_REGISTRY}/auth
    build:
      context: ./auth/
    environment:
      DB_VENDOR: POSTGRES
      DB_ADDR: auth-db
      DB_DATABASE: keycloak
      DB_USER: keycloak
      DB_PASSWORD: password
      KEYCLOAK_USER: admin
      KEYCLOAK_PASSWORD: Pa55w0rd
      KEYCLOAK_LOGLEVEL: INFO
    depends_on:
      - auth-db
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.to-auth.rule=PathPrefix(`/auth`)"
      - "traefik.http.services.auth.loadbalancer.server.port=8080"

  # ----------------- ADAPTER SERVICE (/adapter) --------------------
  adapter:
    image: ${DOCKER_REGISTRY}/adapter
    build:
      context: ./adapter/
    depends_on:
      - adapter-db
    environment:
      DB_URL: jdbc:postgresql://adapter-db:5432/adapterservice
      RABBIT_HOST: rabbitmq
      RABBIT_USR: rabbit_adm
      RABBIT_PWD: R4bb!7_4DM_p4SS
      RABBIT_PORT: 5672
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.to-adapter.rule=PathPrefix(`/api/adapter`)"
      - "traefik.http.routers.to-adapter.middlewares=adapter-stripprefix@docker"
      - "traefik.http.middlewares.adapter-stripprefix.stripprefix.prefixes=/api/adapter"
      - "traefik.http.services.adapter.loadbalancer.server.port=8080"

  adapter-db:
    image: postgres
    environment:
      - POSTGRES_USER=adapterservice
      - POSTGRES_PASSWORD=admin

  # ----------------- SCHEDULER SERVICE (/scheduler) --------------------
  scheduler:
    image: ${DOCKER_REGISTRY}/scheduler
    build:
      context: ./scheduler/
    environment:
      CONFIG_SERVICE_URL: http://core:8080
      ADAPTER_SERVICE_URL: http://adapter:8080
      TRANSFORMATION_SERVICE_URL: http://transformation:8080
      NOTIFICATION_SERVICE_URL: http://notification:8080
      STORAGE_SERVICE_URL: http://storage:3000
      INITIAL_CONNECTION_RETRIES: 20
      INITIAL_CONNECTION_RETRY_BACKOFF: 5000
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.to-scheduler.rule=PathPrefix(`/api/scheduler`)"
      - "traefik.http.routers.to-scheduler.middlewares=scheduler-stripprefix@docker"
      - "traefik.http.middlewares.scheduler-stripprefix.stripprefix.prefixes=/api/scheduler"
  # ----------------- STORAGE SERVICE (/storage) --------------------
  storage: # Wraps postgres database with API
    image: ${DOCKER_REGISTRY}/storage
    build: ./storage/postgrest/
    environment:
      DATABASE_HOST: storage-db
      DATABASE_PORT: 5432
      DATABASE_NAME: ods
      DATABASE_USER: postgrest
      DATABASE_PW: postgres-wrapper-pw
    depends_on:
      - storage-db
      - storage-db-liquibase # TODO: make sure the migration runs through before reading db structure
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.to-storage.rule=PathPrefix(`/api/storage`)"
      - "traefik.http.routers.to-storage.middlewares=storage-stripprefix@docker,storage-addaccept@docker"
      - "traefik.http.middlewares.storage-stripprefix.stripprefix.prefixes=/api/storage"
      - "traefik.http.middlewares.storage-addaccept.headers.customrequestheaders.Accept=application/json" # Firefox Browser Support
      - "traefik.http.services.storage.loadbalancer.server.port=3000"

  storage-db:
    image: postgres:12-alpine
    environment:
      POSTGRES_DB: ods
      POSTGRES_USER: ods_admin
      POSTGRES_PASSWORD: ods_pw
  # Uncomment this if you want to persist the data.
  # volumes:
  #   - "./pgdata:/var/lib/postgresql/data"

  storage-db-ui: # management UI for Postgres
    image: adminer

  storage-db-liquibase: # perform database migration on start up
    image: ${DOCKER_REGISTRY}/storage-db-liquibase
    build: ./storage/liquibase/ # TODO: Sql Injection is currently
    environment:
      DATABASE_HOST: storage-db
      DATABASE_PORT: 5432
      DATABASE_NAME: ods
      DATABASE_USER: ods_admin
      DATABASE_PW: ods_pw

  storage-swagger: # API documentation for storage service
    image: swaggerapi/swagger-ui
    environment:
      API_URL: http://localhost:9400/

  # ----------------- TRANSFORMATION SERVICE (/transformation) --------------------
  transformation:
    image: ${DOCKER_REGISTRY}/transformation
    build:
      context: ./transformation/
    environment:
      AUTH_ENABLED: 'false' #TODO: turn to true as soon as it works!
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.to-transformation.rule=PathPrefix(`/api/transformation`)"
      - "traefik.http.routers.to-transformation.middlewares=transformation-stripprefix@docker"
      - "traefik.http.middlewares.transformation-stripprefix.stripprefix.prefixes=/api/transformation"
      - "traefik.http.services.transformation.loadbalancer.server.port=8080"


  # ----------------- NOTIFICATION SERVICE (/notification) --------------------
  notification:
    image: ${DOCKER_REGISTRY}/notification
    build:
      context: ./notification/
    environment:
      AUTH_ENABLED: 'false' #TODO: turn to true as soon as it works!

      # Postgres connection vars
      PGUSER: 'notification_usr'
      PGHOST: 'notification-db'
      PGPASSWORD: 'admin'
      PGPORT: 5432,

      # Rabbitmq connection details
      AMQP_SERVICE_HOST: 'rabbitmq'
      AMQP_SERVICE_USER: 'rabbit_adm'
      AMQP_SERVICE_PWD: 'R4bb!7_4DM_p4SS'

      AMQP_NOTIFICATION_QUEUE: 'NOTIF_QUEUE'
    depends_on:
      - notification-db
      - rabbitmq
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.to-notification.rule=PathPrefix(`/api/notification`)"
      - "traefik.http.routers.to-notification.middlewares=notification-stripprefix@docker"
      - "traefik.http.middlewares.notification-stripprefix.stripprefix.prefixes=/api/notification"
      - "traefik.http.services.notification.loadbalancer.server.port=8080"

  notification-db:
    image: postgres
    environment:
      POSTGRES_USER: 'notification_usr'
      POSTGRES_PASSWORD: 'admin'
  # ----------------- CORE SERVICE (/core) --------------------
  core:
    image: ${DOCKER_REGISTRY}/core
    build:
      context: ./core/
    environment:
      - DB_URL=jdbc:postgresql://core-db:5432/coreservice
    depends_on:
      - core-db
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.to-core.rule=PathPrefix(`/api/core`)"
      - "traefik.http.routers.to-core.middlewares=core-stripprefix@docker"
      - "traefik.http.middlewares.core-stripprefix.stripprefix.prefixes=/api/core"
      - "traefik.http.services.core.loadbalancer.server.port=8080"

  core-db:
    image: postgres
    environment:
      - POSTGRES_USER=coreservice
      - POSTGRES_PASSWORD=admin

# -------------------- EDGE SERVER (PORT 9000) -----------------------------
  edge:
    image: traefik:latest
    command:
      - --entrypoints.web.address=:80
      - --providers.docker # enable label annotations in compose file
      - --providers.docker.exposedByDefault=false
      - --api.insecure # Dashboard: don't do that in production
      # - --log.level=DEBUG
    ports:
      - "9000:80"     # The HTTP port
      - "9001:8080"   # The Web UI (enabled by --api)
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock # So that Traefik can listen to the Docker events

# -------------------- RABBIT-MQ -------------------------------------------
  rabbitmq:
    image:  rabbitmq:management
    environment:
      RABBITMQ_ERLANG_COOKIE: 'S0m3_R4bBi7_C0ok13'
      RABBITMQ_DEFAULT_USER: 'rabbit_adm'
      RABBITMQ_DEFAULT_PASS: 'R4bb!7_4DM_p4SS'
    labels:
        - "traefik.enable=true"
        - "traefik.http.routers.to-amqp.rule=PathPrefix(`/api/amqp`)"
        - "traefik.http.routers.to-amqp.middlewares=amqp-stripprefix@docker"
        - "traefik.http.middlewares.amqp-stripprefix.stripprefix.prefixes=/api/amqp"
        - "traefik.http.services.amqp.loadbalancer.server.port=8080"
    ports:
      - "15672:15672"
      - "5672:5672"
