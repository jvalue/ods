name: Open Data Service (ODS)

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:

  # ----------------- ADAPTER SERVICE --------------------

  adapter-build:
    name: Adapter Build & Test
    runs-on: ubuntu-18.04

    steps:
      - uses: actions/checkout@v2

      - name: Build and Test
        run: |
          docker-compose -f docker-compose.yml build adapter

      - name: Build Integration-test
        run: |
          docker-compose -f docker-compose.yml -f docker-compose.it.yml build adapter-it

      - name: Run Integration-test
        # Only the logs from the services listed in the `docker-compose up` command are going to be printed to stdout
        # To get logs from other services too, just add them to the `docker-compose up` command
        run: |
          docker-compose -f docker-compose.yml -f docker-compose.it.yml up --exit-code-from adapter-it adapter adapter-it
          docker-compose -f docker-compose.yml -f docker-compose.it.yml down

      - name: Save Docker image as artifact
        run: |
          IMAGE_ID=$(sed -n 's/^DOCKER_REGISTRY=//p' .env)/adapter
          docker save $IMAGE_ID > adapter.tar

      - name: Upload Docker image as artifact
        uses: actions/upload-artifact@v1
        with:
          name: adapter-artifact
          path: adapter.tar


  # ----------------- SCHEDULER SERVICE --------------------

  scheduler-build:
    name: Scheduler Build & Test
    runs-on: ubuntu-18.04

    steps:
      - uses: actions/checkout@v2

      - name: Build and Test
        run: |
          docker-compose -f docker-compose.yml build scheduler

      - name: Build Integration-test
        run: |
          docker-compose -f docker-compose.yml -f docker-compose.it.yml build scheduler-it

      - name: Run Integration-test
        # Only the logs from the services listed in the `docker-compose up` command are going to be printed to stdout
        # To get logs from other services too, just add them to the `docker-compose up` command
        run: |
          docker-compose -f docker-compose.yml -f docker-compose.it.yml up --exit-code-from scheduler-it scheduler scheduler-it
          docker-compose -f docker-compose.yml -f docker-compose.it.yml down

      - name: Save Docker image as artifact
        run: |
          IMAGE_ID=$(sed -n 's/^DOCKER_REGISTRY=//p' .env)/scheduler
          docker save $IMAGE_ID > scheduler.tar

      - name: Upload Docker image as artifact
        uses: actions/upload-artifact@v1
        with:
          name: scheduler-artifact
          path: scheduler.tar


  # ----------------- STORAGE SERVICE --------------------

  storage-build:
    name: Storage Build & Test
    runs-on: ubuntu-18.04

    steps:
      - uses: actions/checkout@v2

      - name: Build and Test
        run: |
          docker-compose -f docker-compose.yml build storage
          docker-compose -f docker-compose.yml build storage-db-liquibase
          docker-compose -f docker-compose.yml build storage-mq

      - name: Build Integration-test
        run: |
          docker-compose -f docker-compose.yml -f docker-compose.it.yml build storage-it

      - name: Run Integration-test
        # Only the logs from the services listed in the `docker-compose up` command are going to be printed to stdout
        # To get logs from other services too, just add them to the `docker-compose up` command
        run: |
          docker-compose -f docker-compose.yml -f docker-compose.it.yml up -d storage-db
          docker-compose -f docker-compose.yml -f docker-compose.it.yml up storage-db-liquibase
          docker-compose -f docker-compose.yml -f docker-compose.it.yml up -d storage-mq storage
          docker-compose -f docker-compose.yml -f docker-compose.it.yml up --exit-code-from storage-it storage-mq storage-it
          docker-compose -f docker-compose.yml -f docker-compose.it.yml down

      - name: Save Docker image as artifact
        run: |
          IMAGE_ID_STORAGE=$(sed -n 's/^DOCKER_REGISTRY=//p' .env)/storage
          IMAGE_ID_LIQUIBASE=$(sed -n 's/^DOCKER_REGISTRY=//p' .env)/storage-db-liquibase
          IMAGE_ID_STORAGEMQ=$(sed -n 's/^DOCKER_REGISTRY=//p' .env)/storage-mq

          docker save $IMAGE_ID_STORAGE > storage_postgrest.tar
          docker save $IMAGE_ID_LIQUIBASE > storage_liquibase.tar
          docker save $IMAGE_ID_STORAGEMQ > storage_mq.tar

      - name: Upload Storage Docker image as artifact
        uses: actions/upload-artifact@v1
        with:
          name: storage-artifact
          path: storage_postgrest.tar

      - name: Upload Liquibase Docker image as artifact
        uses: actions/upload-artifact@v1
        with:
          name: liquibase-artifact
          path: storage_liquibase.tar

      - name: Upload Storage-MQ Docker image as artifact
        uses: actions/upload-artifact@v1
        with:
          name: storagemq-artifact
          path: storage_mq.tar


  # ----------------- PIPELINE SERVICE --------------------

  pipeline-build:
    name: Pipeline Build & Test
    runs-on: ubuntu-18.04

    steps:
      - uses: actions/checkout@v2

      - name: Build and Test
        run: |
          docker-compose -f docker-compose.yml build pipeline

      - name: Build Integration-test
        run: |
          docker-compose -f docker-compose.yml -f docker-compose.it.yml build pipeline-it

      - name: Run Integration-test
        # Only the logs from the services listed in the `docker-compose up` command are going to be printed to stdout
        # To get logs from other services too, just add them to the `docker-compose up` command
        run: |
          docker-compose -f docker-compose.yml -f docker-compose.it.yml up --exit-code-from pipeline-it pipeline pipeline-it
          docker-compose -f docker-compose.yml -f docker-compose.it.yml down

      - name: Save Docker image as artifact
        run: |
          IMAGE_ID=$(sed -n 's/^DOCKER_REGISTRY=//p' .env)/pipeline
          docker save $IMAGE_ID > pipeline.tar

      - name: Upload Docker image as artifact
        uses: actions/upload-artifact@v1
        with:
          name: pipeline-artifact
          path: pipeline.tar

    # ----------------- NOTIFICATION SERVICE --------------------

  notification-build:
    name: Notification Build & Test
    runs-on: ubuntu-18.04

    steps:
      - uses: actions/checkout@v2

      - name: Build and Test
        run: |
          docker-compose -f docker-compose.yml build notification

      - name: Build Integration-test
        run: |
          docker-compose -f docker-compose.yml -f docker-compose.it.yml build notification-it

      - name: Run Integration-test
        # Only the logs from the services listed in the `docker-compose up` command are going to be printed to stdout
        # To get logs from other services too, just add them to the `docker-compose up` command
        run: |
          docker-compose -f docker-compose.yml -f docker-compose.it.yml up --exit-code-from notification-it notification notification-it
          docker-compose -f docker-compose.yml -f docker-compose.it.yml down

      - name: Save Docker image as artifact
        run: |
          IMAGE_ID=$(sed -n 's/^DOCKER_REGISTRY=//p' .env)/notification
          docker save $IMAGE_ID > notification.tar

      - name: Upload Docker image as artifact
        uses: actions/upload-artifact@v1
        with:
          name: notification-artifact
          path: notification.tar


  # ----------------- UI SERVICE --------------------

  ui-build:
    name: UI Build & Test
    runs-on: ubuntu-18.04

    steps:
      - uses: actions/checkout@v2

      - name: Build and Test
        run: |
          docker-compose -f docker-compose.yml build ui

      - name: Save Docker image as artifact
        run: |
          IMAGE_ID=$(sed -n 's/^DOCKER_REGISTRY=//p' .env)/ui
          docker save $IMAGE_ID > ui.tar

      - name: Upload Docker image as artifact
        uses: actions/upload-artifact@v1
        with:
          name: ui-artifact
          path: ui.tar

  # ----------------- SYSTEMTEST --------------------
  systemtest:
    name: Systemtest
    runs-on: ubuntu-18.04
    needs: [adapter-build, notification-build, scheduler-build, storage-build, pipeline-build, ui-build]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup node
        uses: actions/setup-node@v1
        with:
          node-version: '16'
      - name: Download adapter artifact
        uses: actions/download-artifact@v1
        with:
          name: adapter-artifact
      - name: Download scheduler artifact
        uses: actions/download-artifact@v1
        with:
          name: scheduler-artifact
      - name: Download storage artifact
        uses: actions/download-artifact@v1
        with:
          name: storage-artifact
      - name: Download liquibase artifact
        uses: actions/download-artifact@v1
        with:
          name: liquibase-artifact
      - name: Download storagemq artifact
        uses: actions/download-artifact@v1
        with:
          name: storagemq-artifact
      - name: Download pipeline artifact
        uses: actions/download-artifact@v1
        with:
          name: pipeline-artifact
      - name: Download notification artifact
        uses: actions/download-artifact@v1
        with:
          name: notification-artifact

      - name: Load images from artifacts
        run: |
          docker load -i ./scheduler-artifact/scheduler.tar
          docker load -i ./storage-artifact/storage_postgrest.tar
          docker load -i ./liquibase-artifact/storage_liquibase.tar
          docker load -i ./storagemq-artifact/storage_mq.tar
          docker load -i ./pipeline-artifact/pipeline.tar
          docker load -i ./notification-artifact/notification.tar
          docker load -i ./adapter-artifact/adapter.tar

      - name: Install dependencies
        working-directory: ./system-test
        run: npm ci
      - name: Run test
        working-directory: ./system-test
        run: npm run test
      - name: Upload logs
        if: success() || failure()
        uses: actions/upload-artifact@v2
        with:
          name: SystemTestLogs
          path: system-test/logs/*


  # ----------------- Registry Upload --------------------

  adapter_upload:
    name: Adapter Publish
    runs-on: ubuntu-18.04

    needs: [systemtest]

    if: github.repository == 'jvalue/open-data-service' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v2

      - name: Download adapter artifact
        uses: actions/download-artifact@v1
        with:
          name: adapter-artifact


      - name: Load Docker Image from artifact
        run: |
          docker load -i ./adapter-artifact/adapter.tar

      - name: Adapter Push to registry
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

          IMAGE_ID=$(sed -n 's/^DOCKER_REGISTRY=//p' .env)/adapter

          ADAPTER_VERSION=$(grep "version" ./adapter/src/main/resources/application.properties | sed "s/^app.version=//g")

          docker tag $IMAGE_ID $IMAGE_ID:$ADAPTER_VERSION
          docker tag $IMAGE_ID $IMAGE_ID:latest

          docker push $IMAGE_ID:$ADAPTER_VERSION
          docker push $IMAGE_ID:latest

  scheduler_upload:
    name: Scheduler Publish
    runs-on: ubuntu-18.04

    needs: [systemtest]

    if: github.repository == 'jvalue/open-data-service' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v2

      - name: Download scheduler artifact
        uses: actions/download-artifact@v1
        with:
          name: scheduler-artifact

      - name: Load Docker Image from artifact
        run: |
          docker load -i ./scheduler-artifact/scheduler.tar

      - name: Scheduler Push to registry
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

          IMAGE_ID=$(sed -n 's/^DOCKER_REGISTRY=//p' .env)/scheduler

          SCHEDULER_VERSION=$(grep "version" scheduler/package.json | awk '{print $2}' | sed 's/[,"]//g')

          docker tag $IMAGE_ID $IMAGE_ID:$SCHEDULER_VERSION
          docker tag $IMAGE_ID $IMAGE_ID:latest

          docker push $IMAGE_ID:$SCHEDULER_VERSION
          docker push $IMAGE_ID:latest

  storage_upload:
    name: Storage Publish
    runs-on: ubuntu-18.04

    needs: [systemtest]

    if: github.repository == 'jvalue/open-data-service' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v2

      - name: Download storage artifact
        uses: actions/download-artifact@v1
        with:
          name: storage-artifact
      - name: Download liquibase artifact
        uses: actions/download-artifact@v1
        with:
          name: liquibase-artifact
      - name: Download storage-mq artifact
        uses: actions/download-artifact@v1
        with:
          name: storagemq-artifact

      - name: Load Docker Images from artifacts
        run: |

          docker load -i ./storage-artifact/storage_postgrest.tar
          docker load -i ./liquibase-artifact/storage_liquibase.tar
          docker load -i ./storagemq-artifact/storage_mq.tar

      - name: Storage Push to registry
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

          STORAGE_VERSION=$(grep "VERSION" ./storage/version.txt | awk '{print $3}' | sed 's/[,"]//g')

          IMAGE_ID_STORAGE=$(sed -n 's/^DOCKER_REGISTRY=//p' .env)/storage
          IMAGE_ID_LIQUIBASE=$(sed -n 's/^DOCKER_REGISTRY=//p' .env)/storage-db-liquibase
          IMAGE_ID_STORAGE_MQ=$(sed -n 's/^DOCKER_REGISTRY=//p' .env)/storage-mq

          docker tag $IMAGE_ID_STORAGE $IMAGE_ID_STORAGE:$STORAGE_VERSION
          docker tag $IMAGE_ID_STORAGE $IMAGE_ID_STORAGE:latest

          docker tag $IMAGE_ID_LIQUIBASE $IMAGE_ID_LIQUIBASE:$STORAGE_VERSION
          docker tag $IMAGE_ID_LIQUIBASE $IMAGE_ID_LIQUIBASE:latest

          docker tag $IMAGE_ID_STORAGE_MQ $IMAGE_ID_STORAGE_MQ:$STORAGE_VERSION
          docker tag $IMAGE_ID_STORAGE_MQ $IMAGE_ID_STORAGE_MQ:latest

          docker push $IMAGE_ID_STORAGE:$STORAGE_VERSION
          docker push $IMAGE_ID_STORAGE:latest

          docker push $IMAGE_ID_LIQUIBASE:$STORAGE_VERSION
          docker push $IMAGE_ID_LIQUIBASE:latest

          docker push $IMAGE_ID_STORAGE_MQ:$STORAGE_VERSION
          docker push $IMAGE_ID_STORAGE_MQ:latest

  pipeline_upload:
    name: Pipeline Publish
    runs-on: ubuntu-18.04

    needs: [systemtest]

    if: github.repository == 'jvalue/open-data-service' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v2

      - name: Download pipeline artifact
        uses: actions/download-artifact@v1
        with:
          name: pipeline-artifact

      - name: Load Docker Image from artifact
        run: |
          docker load -i ./pipeline-artifact/pipeline.tar

      - name: Pipeline Push to registry
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

          IMAGE_ID=$(sed -n 's/^DOCKER_REGISTRY=//p' .env)/pipeline

          PIPELINE_VERSION=$(grep "version" ./pipeline/package.json | awk '{print $2}' | sed 's/[,"]//g')

          docker tag $IMAGE_ID $IMAGE_ID:$PIPELINE_VERSION
          docker tag $IMAGE_ID $IMAGE_ID:latest

          docker push $IMAGE_ID:$PIPELINE_VERSION
          docker push $IMAGE_ID:latest

  notifcation_upload:
    name: Notifcation Publish
    runs-on: ubuntu-18.04

    needs: [systemtest]

    if: github.repository == 'jvalue/open-data-service' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v2

      - name: Download notifcation artifact
        uses: actions/download-artifact@v1
        with:
          name: notification-artifact

      - name: Load Docker Image from artifact
        run: |
          docker load -i ./notification-artifact/notification.tar

      - name: Notifcation Push to registry
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

          IMAGE_ID=$(sed -n 's/^DOCKER_REGISTRY=//p' .env)/notification

          NOTIFICATION_VERSION=$(grep "version" ./notification/package.json | awk '{print $2}' | sed 's/[,"]//g')

          docker tag $IMAGE_ID $IMAGE_ID:$NOTIFICATION_VERSION
          docker tag $IMAGE_ID $IMAGE_ID:latest

          docker push $IMAGE_ID:$NOTIFICATION_VERSION
          docker push $IMAGE_ID:latest

  ui_upload:
    name: UI Publish
    runs-on: ubuntu-18.04

    needs: [systemtest]

    if: github.repository == 'jvalue/open-data-service' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v2

      - name: Download ui artifact
        uses: actions/download-artifact@v1
        with:
          name: ui-artifact

      - name: Load Docker Image from artifact
        run: |
          docker load -i ./ui-artifact/ui.tar

      - name: UI Push to registry
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

          IMAGE_ID=$(sed -n 's/^DOCKER_REGISTRY=//p' .env)/ui

          UI_VERSION=$(grep "version" ./ui/package.json | awk '{print $2}' | sed 's/[,"]//g')

          docker tag $IMAGE_ID $IMAGE_ID:$UI_VERSION
          docker tag $IMAGE_ID $IMAGE_ID:latest

          docker push $IMAGE_ID:$UI_VERSION
          docker push $IMAGE_ID:latest
