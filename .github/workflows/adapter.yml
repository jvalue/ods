name: Docker

on:
  push:
    # Publish `master` as Docker `latest` image.
    branches:
      - master

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

  # Run tests for any PRs.
  pull_request:

env:
  # TODO: Change variable to your image's name.
  IMAGE_NAME: adapter

jobs:
  # Run tests.
  # See also https://docs.docker.com/docker-hub/builds/automated-testing/
  build:
    runs-on: [ubuntu-latest]

    steps:
      - uses: actions/checkout@v2

      - env:
          ADAPTER_DOCKER_IMAGE_NAME: docker.pkg.github.com/${{ github.repository }}/$IMAGE_NAME  
      - name: Build $IMAGE_NAME
        run: |
          cd adapter
          docker build -t $ADAPTER_DOCKER_IMAGE_NAME .
          mkdir image
          docker save $ADAPTER_DOCKER_IMAGE_NAME > image/adapter.tar
      
      - name: Upload $IMAGE_NAME artifacts
        uses: actions/upload-artifact@v1
        with:
          name: build-artifact
          path: adapter/image/adapter.tar
    
  test:
    needs: [build]
    
    runs-on: [ubuntu-latest]
    
    steps:
      - uses: actions/checkout@v2
        
      - name: Download artifact from $IMAGE_NAME build
        uses: actions/download-artifact@v1
        with:
          name: build-artifact
      
      - name: integrationtest
        run: |
          docker load -i build-artefact/image/adapter.tar
          docker-compose -f docker-compose.yml -f docker-compose.ci.yml build adapter-it
          docker-compose -f docker-compose.yml -f docker-compose.ci.yml up -d adapter
          docker-compose -f docker-compose.yml -f docker-compose.ci.yml up --exit-code-from adapter-it adapter-it
          docker-compose logs
          docker-compose -f docker-compose.yml -f docker-compose.ci.yml down


  # Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  #push:
  #  # Ensure test job passes before pushing image.
  #  needs: test
  #
  #  runs-on: ubuntu-latest
  #  if: github.event_name == 'push'
  #
  #  steps:
  #    - uses: actions/checkout@v2
  #
  #    - name: Build image
  #      run: docker build . --file Dockerfile --tag image
  #
  #    - name: Log into registry
  #      run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin
  #
  #    - name: Push image
  #      run: |
  #        IMAGE_ID=docker.pkg.github.com/${{ github.repository }}/$IMAGE_NAME
  #
  #         # Strip git ref prefix from version
  #        VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
  #
  #        # Strip "v" prefix from tag name
  #        [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
  #
  #        # Use Docker `latest` tag convention
  #        [ "$VERSION" == "master" ] && VERSION=latest
  #
  #        echo IMAGE_ID=$IMAGE_ID
  #        echo VERSION=$VERSION
  #
  #        docker tag image $IMAGE_ID:$VERSION
  #        docker push $IMAGE_ID:$VERSION
