{
  "consumer": {
    "name": "UI"
  },
  "provider": {
    "name": "Pipeline"
  },
  "interactions": [
    {
      "description": "a request for getting all pipelines",
      "providerState": "some pipelines exist",
      "request": {
        "method": "GET",
        "path": "/configs/"
      },
      "response": {
        "status": 200,
        "headers": {
          "Content-Type": "application/json; charset=utf-8"
        },
        "body": [
          {
            "id": 1,
            "datasourceId": 2,
            "metadata": {
              "author": "some author",
              "description": "some description",
              "displayName": "some display name",
              "license": "some license"
            },
            "transformation": {
              "func": "some function"
            }
          }
        ],
        "matchingRules": {
          "$.body": {
            "min": 1
          },
          "$.body[*].*": {
            "match": "type"
          }
        }
      }
    },
    {
      "description": "a request for getting all pipelines",
      "providerState": "no pipelines exist",
      "request": {
        "method": "GET",
        "path": "/configs/"
      },
      "response": {
        "status": 200,
        "headers": {
          "Content-Type": "application/json; charset=utf-8"
        },
        "body": [

        ]
      }
    },
    {
      "description": "a request for getting the pipeline with id 1",
      "providerState": "pipeline with id 1 exists",
      "request": {
        "method": "GET",
        "path": "/configs/1"
      },
      "response": {
        "status": 200,
        "headers": {
          "Content-Type": "application/json; charset=utf-8"
        },
        "body": {
          "id": 1,
          "datasourceId": 2,
          "metadata": {
            "author": "some author",
            "description": "some description",
            "displayName": "some display name",
            "license": "some license"
          },
          "transformation": {
            "func": "some function"
          }
        },
        "matchingRules": {
          "$.body": {
            "match": "type"
          }
        }
      }
    },
    {
      "description": "a request for getting the pipeline with id 1",
      "providerState": "pipeline with id 1 does not exist",
      "request": {
        "method": "GET",
        "path": "/configs/1"
      },
      "response": {
        "status": 404,
        "headers": {
        }
      }
    },
    {
      "description": "a request for getting the pipeline with id NaN",
      "providerState": "any state",
      "request": {
        "method": "GET",
        "path": "/configs/NaN"
      },
      "response": {
        "status": 400,
        "headers": {
        }
      }
    },
    {
      "description": "a request for creating a pipeline",
      "providerState": "any state",
      "request": {
        "method": "POST",
        "path": "/configs/",
        "headers": {
          "Content-Type": "application/json"
        },
        "body": {
          "id": 1,
          "datasourceId": 2,
          "metadata": {
            "author": "some author",
            "description": "some description",
            "displayName": "some display name",
            "license": "some license"
          },
          "transformation": {
            "func": "some function"
          }
        }
      },
      "response": {
        "status": 201,
        "headers": {
          "Content-Type": "application/json; charset=utf-8"
        },
        "body": {
          "id": 1,
          "datasourceId": 2,
          "metadata": {
            "author": "some author",
            "description": "some description",
            "displayName": "some display name",
            "license": "some license"
          },
          "transformation": {
            "func": "some function"
          }
        },
        "matchingRules": {
          "$.body": {
            "match": "type"
          }
        }
      }
    },
    {
      "description": "a request for updating the pipeline with id 1",
      "providerState": "pipeline with id 1 exists",
      "request": {
        "method": "PUT",
        "path": "/configs/1",
        "headers": {
          "Content-Type": "application/json"
        },
        "body": {
          "id": 1,
          "datasourceId": 2,
          "metadata": {
            "author": "some author",
            "description": "some description",
            "displayName": "some display name",
            "license": "some license"
          },
          "transformation": {
            "func": "some function"
          }
        }
      },
      "response": {
        "status": 204,
        "headers": {
        }
      }
    },
    {
      "description": "a request for updating the pipeline with id 1",
      "providerState": "pipeline with id 1 does not exist",
      "request": {
        "method": "PUT",
        "path": "/configs/1",
        "headers": {
          "Content-Type": "application/json"
        },
        "body": {
          "id": 1,
          "datasourceId": 2,
          "metadata": {
            "author": "some author",
            "description": "some description",
            "displayName": "some display name",
            "license": "some license"
          },
          "transformation": {
            "func": "some function"
          }
        }
      },
      "response": {
        "status": 404,
        "headers": {
        }
      }
    },
    {
      "description": "a request for updating the pipeline with id NaN",
      "providerState": "any state",
      "request": {
        "method": "PUT",
        "path": "/configs/NaN",
        "headers": {
          "Content-Type": "application/json"
        },
        "body": {
          "id": null,
          "datasourceId": 2,
          "metadata": {
            "author": "some author",
            "description": "some description",
            "displayName": "some display name",
            "license": "some license"
          },
          "transformation": {
            "func": "some function"
          }
        }
      },
      "response": {
        "status": 400,
        "headers": {
        }
      }
    },
    {
      "description": "a request for deleting the pipeline with id 1",
      "providerState": "pipeline with id 1 exists",
      "request": {
        "method": "DELETE",
        "path": "/configs/1"
      },
      "response": {
        "status": 204,
        "headers": {
        }
      }
    },
    {
      "description": "a request for deleting the pipeline with id 1",
      "providerState": "pipeline with id 1 does not exist",
      "request": {
        "method": "DELETE",
        "path": "/configs/1"
      },
      "response": {
        "status": 204,
        "headers": {
        }
      }
    },
    {
      "description": "a request for deleting the pipeline with id NaN",
      "providerState": "any state",
      "request": {
        "method": "DELETE",
        "path": "/configs/NaN"
      },
      "response": {
        "status": 400,
        "headers": {
        }
      }
    },
    {
      "description": "a request for getting latest transformed data with id 1",
      "providerState": "transformed data with id 1 exists",
      "request": {
        "method": "GET",
        "path": "/transdata/1/transforms/latest"
      },
      "response": {
        "status": 200,
        "headers": {
          "Content-Type": "application/json; charset=utf-8"
        },
        "body": {
          "id": 1,
          "healthStatus": "OK",
          "timestamp": "some timestamp"
        },
        "matchingRules": {
          "$.body": {
            "match": "type"
          }
        }
      }
    },
    {
      "description": "a request for getting latest transformed data with id 1",
      "providerState": "transformed data with id 1 does not exist",
      "request": {
        "method": "GET",
        "path": "/transdata/1/transforms/latest"
      },
      "response": {
        "status": 404,
        "headers": {
        }
      }
    },
    {
      "description": "a request for getting latest transformed data with id NaN",
      "providerState": "any state",
      "request": {
        "method": "GET",
        "path": "/transdata/NaN/transforms/latest"
      },
      "response": {
        "status": 400,
        "headers": {
        }
      }
    },
    {
      "description": "a valid request for transforming data",
      "providerState": "any state",
      "request": {
        "method": "POST",
        "path": "/job",
        "headers": {
          "Content-Type": "application/json"
        },
        "body": {
          "func": "data.value = 42; return data;",
          "data": {
          }
        }
      },
      "response": {
        "status": 200,
        "headers": {
          "Content-Type": "application/json; charset=utf-8"
        },
        "body": {
          "data": {
            "value": 42
          },
          "stats": {
            "durationInMilliSeconds": 3.14,
            "startTimestamp": 123,
            "endTimestamp": 456
          }
        },
        "matchingRules": {
          "$.body": {
            "match": "type"
          }
        }
      }
    },
    {
      "description": "an request for transforming data whose function has invalid syntax",
      "providerState": "any state",
      "request": {
        "method": "POST",
        "path": "/job",
        "headers": {
          "Content-Type": "application/json"
        },
        "body": {
          "func": "n0t v4l1d j4v4$(r1pt",
          "data": {
          }
        }
      },
      "response": {
        "status": 400,
        "headers": {
          "Content-Type": "application/json; charset=utf-8"
        },
        "body": {
          "error": {
            "name": "some error",
            "message": "some message",
            "lineNumber": 1,
            "position": 2,
            "stacktrace": [

            ]
          },
          "stats": {
            "durationInMilliSeconds": 3.14,
            "startTimestamp": 123,
            "endTimestamp": 456
          }
        },
        "matchingRules": {
          "$.body.error.name": {
            "match": "type"
          },
          "$.body.error.message": {
            "match": "type"
          },
          "$.body.error.lineNumber": {
            "match": "type"
          },
          "$.body.error.position": {
            "match": "type"
          },
          "$.body.stats": {
            "match": "type"
          }
        }
      }
    },
    {
      "description": "an request for transforming data whose function throws an error",
      "providerState": "any state",
      "request": {
        "method": "POST",
        "path": "/job",
        "headers": {
          "Content-Type": "application/json"
        },
        "body": {
          "func": "throw new Error()",
          "data": {
          }
        }
      },
      "response": {
        "status": 400,
        "headers": {
          "Content-Type": "application/json; charset=utf-8"
        },
        "body": {
          "error": {
            "name": "some error",
            "message": "some message",
            "lineNumber": 1,
            "position": 2,
            "stacktrace": [
              "some stacktrace entry"
            ]
          },
          "stats": {
            "durationInMilliSeconds": 3.14,
            "startTimestamp": 123,
            "endTimestamp": 456
          }
        },
        "matchingRules": {
          "$.body": {
            "match": "type"
          },
          "$.body.error.stacktrace": {
            "min": 1
          },
          "$.body.error.stacktrace[*].*": {
            "match": "type"
          }
        }
      }
    }
  ],
  "metadata": {
    "pactSpecification": {
      "version": "2.0.0"
    }
  }
}